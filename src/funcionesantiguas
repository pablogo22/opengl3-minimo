

// ---------------------------------------------------------------------------------------------
// función que se encarga de visualizar un triángulo relleno en modo diferido,
// no indexado, usando la clase 'DescrVAO' (declarada en 'vaos-vbos.h')
// el triángulo se dibuja en primer lugar relleno con colores, y luego las aristas en negro

void DibujarTriangulo_NoInd( )
{
    assert( glGetError() == GL_NO_ERROR );

    // la primera vez, crear e inicializar el VAO
    if ( vao_no_ind == nullptr )
    {
        // número de vértices que se van a dibujar
        constexpr unsigned num_verts = 3 ;

        // tablas de posiciones y colores de vértices (posiciones en 2D, con Z=0)
        const GLfloat
            posiciones[ num_verts*2 ] = {  -0.8, -0.8,      +0.8, -0.8,     0.0, 0.8      },
            colores   [ num_verts*3 ] = {  1.0, 0.0, 0.0,   0.0, 1.0, 0.0,  0.0, 0.0, 1.0 };

        // Crear VAO con posiciones, colores e indices
        vao_no_ind = new DescrVAO( cauce->num_atribs, new DescrVBOAtribs( cauce->ind_atrib_posiciones, GL_FLOAT, 2, num_verts, posiciones ));
        vao_no_ind->agregar( new DescrVBOAtribs( cauce->ind_atrib_colores, GL_FLOAT, 3, num_verts, colores ));    
    }
    
    assert( glGetError() == GL_NO_ERROR );

    // duibujar relleno usando los colores del VAO
    glPolygonMode( GL_FRONT_AND_BACK, GL_FILL );
    cauce->fijarUsarColorPlano( false );
    vao_no_ind->habilitarAtrib( cauce->ind_atrib_colores, true );
    vao_no_ind->draw( GL_TRIANGLES );

    assert( glGetError() == GL_NO_ERROR );

    // dibujar las líneas usando color negro
    glPolygonMode( GL_FRONT_AND_BACK, GL_LINE );
    cauce->fijarUsarColorPlano( true );
    cauce->fijarColor( { 0.0, 0.0, 0.0 });
    vao_no_ind->habilitarAtrib( cauce->ind_atrib_colores, false );
    vao_no_ind->draw( GL_TRIANGLES );

    assert( glGetError() == GL_NO_ERROR );
}

// ---------------------------------------------------------------------------------------------
// función que se encarga de visualizar un triángulo  en modo diferido,
// indexado, usando la clase  'DescrVAO' (declarada en vaos-vbos.h)
// el triángulo se dibuja en primer lugar relleno con colores, y luego las aristas en negro

void DibujarTriangulo_Ind( )
{
    assert( glGetError() == GL_NO_ERROR );

    if ( vao_ind == nullptr )
    {
         // número de vértices e índices que se van a dibujar
        constexpr unsigned num_verts = 3, num_inds  = 3 ;

        // tablas de posiciones y colores de vértices (posiciones en 2D, con Z=0)
        const GLfloat
            posiciones[ num_verts*2 ] = {  -0.4, -0.4,      +0.4, -0.4,     0.0, +0.4      },
            colores   [ num_verts*3 ] = {  1.0, 0.0, 0.0,   0.0, 1.0, 0.0,  0.0, 0.0, 1.0 } ;
        const GLuint
            indices   [ num_inds    ] = { 0, 1, 2 };

        vao_ind = new DescrVAO( cauce->num_atribs, new DescrVBOAtribs( cauce->ind_atrib_posiciones, GL_FLOAT, 2, num_verts, posiciones) );
        vao_ind->agregar( new DescrVBOAtribs( cauce->ind_atrib_colores, GL_FLOAT, 3, num_verts, colores) ) ;
        vao_ind->agregar( new DescrVBOInds( GL_UNSIGNED_INT, num_inds, indices ));
    }
   
    assert( glGetError() == GL_NO_ERROR );
    
    glPolygonMode( GL_FRONT_AND_BACK, GL_FILL );
    cauce->fijarUsarColorPlano( false );
    vao_ind->habilitarAtrib( cauce->ind_atrib_colores, true );
    vao_ind->draw( GL_TRIANGLES );

    assert( glGetError() == GL_NO_ERROR );
   
    glPolygonMode( GL_FRONT_AND_BACK, GL_LINE );
    cauce->fijarColor( { 0.0, 0.0, 0.0 });
    vao_ind->habilitarAtrib( cauce->ind_atrib_colores, false );
    vao_ind->draw( GL_TRIANGLES );

    assert( glGetError() == GL_NO_ERROR );
}

// ---------------------------------------------------------------------------------------------
// función que se encarga de visualizar un triángulo relleno en modo diferido,
// usando vectores con entradas de tipos GLM (vec2, vec3, uvec3)
// el triángulo se dibuja en primer lugar relleno con colores, y luego las aristas en negro

void DibujarTriangulo_glm( )
{    
    using namespace std ;
    using namespace glm ;

    assert( glGetError() == GL_NO_ERROR );

    if ( vao_glm == nullptr )
    {

        // tablas de posiciones y colores de vértices (posiciones en 2D, con Z=0)
        const vector<vec2>   posiciones = {  {-0.4, -0.4},     {+0.42, -0.47},   {0.1, +0.37}    };
        const vector<vec3>   colores    = {  {1.0, 1.0, 0.0},  {0.0, 1.0, 1.0},  {1.0, 0.0, 1.0} };
        const vector<uvec3>  indices    = {  { 0, 1, 2 }};   // (un único triángulo)      

        vao_glm = new DescrVAO( cauce->num_atribs, new DescrVBOAtribs( cauce->ind_atrib_posiciones, posiciones ));
        vao_glm->agregar( new DescrVBOAtribs( cauce->ind_atrib_colores, colores )) ;
        vao_glm->agregar( new DescrVBOInds( indices ) );

        assert( glGetError() == GL_NO_ERROR );
    }
   
    assert( glGetError() == GL_NO_ERROR );
    
    glPolygonMode( GL_FRONT_AND_BACK, GL_FILL );
    cauce->fijarUsarColorPlano( false );
    vao_glm->habilitarAtrib( cauce->ind_atrib_colores, true );
    vao_glm->draw( GL_TRIANGLES );

    assert( glGetError() == GL_NO_ERROR );
   
    glPolygonMode( GL_FRONT_AND_BACK, GL_LINE );
    cauce->fijarColor( { 0.0, 0.0, 0.0 });
    vao_glm->habilitarAtrib( cauce->ind_atrib_colores, false );
    vao_glm->draw( GL_TRIANGLES );

    assert( glGetError() == GL_NO_ERROR );
}